// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/yandex-cloud/cluster-api-provider-yandex/internal/pkg/client (interfaces: Client)

// Package mock_client is a generated GoMock package.

//
// Generated by this command:
//
//	mockgen -build_flags=--mod=mod -package mock_client -destination=mock_client/client.go . Client
//

package mock_client

import (
	context "context"
	reflect "reflect"

	compute "github.com/yandex-cloud/go-genproto/yandex/cloud/compute/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	v1alpha1 "github.com/yandex-cloud/cluster-api-provider-yandex/api/v1alpha1"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockClient) Close(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close), arg0)
}

// ComputeCreate mocks base method.
func (m *MockClient) ComputeCreate(arg0 context.Context, arg1 *compute.CreateInstanceRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComputeCreate", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ComputeCreate indicates an expected call of ComputeCreate.
func (mr *MockClientMockRecorder) ComputeCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComputeCreate", reflect.TypeOf((*MockClient)(nil).ComputeCreate), arg0, arg1)
}

// ComputeDelete mocks base method.
func (m *MockClient) ComputeDelete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComputeDelete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ComputeDelete indicates an expected call of ComputeDelete.
func (mr *MockClientMockRecorder) ComputeDelete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComputeDelete", reflect.TypeOf((*MockClient)(nil).ComputeDelete), arg0, arg1)
}

// ComputeGet mocks base method.
func (m *MockClient) ComputeGet(arg0 context.Context, arg1 string) (*compute.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComputeGet", arg0, arg1)
	ret0, _ := ret[0].(*compute.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ComputeGet indicates an expected call of ComputeGet.
func (mr *MockClientMockRecorder) ComputeGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComputeGet", reflect.TypeOf((*MockClient)(nil).ComputeGet), arg0, arg1)
}

// LBAddTarget mocks base method.
func (m *MockClient) LBAddTarget(arg0 context.Context, arg1 interface{}, arg2 v1alpha1.LoadBalancerType) (*operation.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LBAddTarget", arg0, arg1, arg2)
	ret0, _ := ret[0].(*operation.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LBAddTarget indicates an expected call of LBAddTarget.
func (mr *MockClientMockRecorder) LBAddTarget(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LBAddTarget", reflect.TypeOf((*MockClient)(nil).LBAddTarget), arg0, arg1, arg2)
}

// LBGetTargetGroup mocks base method.
func (m *MockClient) LBGetTargetGroup(arg0 context.Context, arg1 string, arg2 v1alpha1.LoadBalancerType) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LBGetTargetGroup", arg0, arg1, arg2)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LBGetTargetGroup indicates an expected call of LBGetTargetGroup.
func (mr *MockClientMockRecorder) LBGetTargetGroup(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LBGetTargetGroup", reflect.TypeOf((*MockClient)(nil).LBGetTargetGroup), arg0, arg1, arg2)
}

// LBRemoveTarget mocks base method.
func (m *MockClient) LBRemoveTarget(arg0 context.Context, arg1 interface{}, arg2 v1alpha1.LoadBalancerType) (*operation.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LBRemoveTarget", arg0, arg1, arg2)
	ret0, _ := ret[0].(*operation.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LBRemoveTarget indicates an expected call of LBRemoveTarget.
func (mr *MockClientMockRecorder) LBRemoveTarget(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LBRemoveTarget", reflect.TypeOf((*MockClient)(nil).LBRemoveTarget), arg0, arg1, arg2)
}
