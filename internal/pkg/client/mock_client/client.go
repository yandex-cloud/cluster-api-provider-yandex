// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/yandex-cloud/cluster-api-provider-yandex/internal/pkg/client (interfaces: Client)
//
// Generated by this command:
//
//	mockgen -build_flags=--mod=mod -package mock_client -destination=mock_client/client.go . Client
//

// Package mock_client is a generated GoMock package.
package mock_client

import (
	context "context"
	reflect "reflect"

	apploadbalancer "github.com/yandex-cloud/go-genproto/yandex/cloud/apploadbalancer/v1"
	compute "github.com/yandex-cloud/go-genproto/yandex/cloud/compute/v1"
	loadbalancer "github.com/yandex-cloud/go-genproto/yandex/cloud/loadbalancer/v1"
	operation "github.com/yandex-cloud/go-genproto/yandex/cloud/operation"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// ALBAddTarget mocks base method.
func (m *MockClient) ALBAddTarget(arg0 context.Context, arg1 *apploadbalancer.AddTargetsRequest) (*operation.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ALBAddTarget", arg0, arg1)
	ret0, _ := ret[0].(*operation.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ALBAddTarget indicates an expected call of ALBAddTarget.
func (mr *MockClientMockRecorder) ALBAddTarget(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ALBAddTarget", reflect.TypeOf((*MockClient)(nil).ALBAddTarget), arg0, arg1)
}

// ALBBackendGroupCreate mocks base method.
func (m *MockClient) ALBBackendGroupCreate(arg0 context.Context, arg1 *apploadbalancer.CreateBackendGroupRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ALBBackendGroupCreate", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ALBBackendGroupCreate indicates an expected call of ALBBackendGroupCreate.
func (mr *MockClientMockRecorder) ALBBackendGroupCreate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ALBBackendGroupCreate", reflect.TypeOf((*MockClient)(nil).ALBBackendGroupCreate), arg0, arg1)
}

// ALBBackendGroupDelete mocks base method.
func (m *MockClient) ALBBackendGroupDelete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ALBBackendGroupDelete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ALBBackendGroupDelete indicates an expected call of ALBBackendGroupDelete.
func (mr *MockClientMockRecorder) ALBBackendGroupDelete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ALBBackendGroupDelete", reflect.TypeOf((*MockClient)(nil).ALBBackendGroupDelete), arg0, arg1)
}

// ALBBackendGroupGet mocks base method.
func (m *MockClient) ALBBackendGroupGet(arg0 context.Context, arg1 string) (*apploadbalancer.BackendGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ALBBackendGroupGet", arg0, arg1)
	ret0, _ := ret[0].(*apploadbalancer.BackendGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ALBBackendGroupGet indicates an expected call of ALBBackendGroupGet.
func (mr *MockClientMockRecorder) ALBBackendGroupGet(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ALBBackendGroupGet", reflect.TypeOf((*MockClient)(nil).ALBBackendGroupGet), arg0, arg1)
}

// ALBBackendGroupGetByName mocks base method.
func (m *MockClient) ALBBackendGroupGetByName(arg0 context.Context, arg1, arg2 string) (*apploadbalancer.BackendGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ALBBackendGroupGetByName", arg0, arg1, arg2)
	ret0, _ := ret[0].(*apploadbalancer.BackendGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ALBBackendGroupGetByName indicates an expected call of ALBBackendGroupGetByName.
func (mr *MockClientMockRecorder) ALBBackendGroupGetByName(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ALBBackendGroupGetByName", reflect.TypeOf((*MockClient)(nil).ALBBackendGroupGetByName), arg0, arg1, arg2)
}

// ALBCreate mocks base method.
func (m *MockClient) ALBCreate(arg0 context.Context, arg1 *apploadbalancer.CreateLoadBalancerRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ALBCreate", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ALBCreate indicates an expected call of ALBCreate.
func (mr *MockClientMockRecorder) ALBCreate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ALBCreate", reflect.TypeOf((*MockClient)(nil).ALBCreate), arg0, arg1)
}

// ALBDelete mocks base method.
func (m *MockClient) ALBDelete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ALBDelete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ALBDelete indicates an expected call of ALBDelete.
func (mr *MockClientMockRecorder) ALBDelete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ALBDelete", reflect.TypeOf((*MockClient)(nil).ALBDelete), arg0, arg1)
}

// ALBGet mocks base method.
func (m *MockClient) ALBGet(arg0 context.Context, arg1 string) (*apploadbalancer.LoadBalancer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ALBGet", arg0, arg1)
	ret0, _ := ret[0].(*apploadbalancer.LoadBalancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ALBGet indicates an expected call of ALBGet.
func (mr *MockClientMockRecorder) ALBGet(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ALBGet", reflect.TypeOf((*MockClient)(nil).ALBGet), arg0, arg1)
}

// ALBGetByName mocks base method.
func (m *MockClient) ALBGetByName(arg0 context.Context, arg1, arg2 string) (*apploadbalancer.LoadBalancer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ALBGetByName", arg0, arg1, arg2)
	ret0, _ := ret[0].(*apploadbalancer.LoadBalancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ALBGetByName indicates an expected call of ALBGetByName.
func (mr *MockClientMockRecorder) ALBGetByName(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ALBGetByName", reflect.TypeOf((*MockClient)(nil).ALBGetByName), arg0, arg1, arg2)
}

// ALBGetTargetGroup mocks base method.
func (m *MockClient) ALBGetTargetGroup(arg0 context.Context, arg1 string) (*apploadbalancer.TargetGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ALBGetTargetGroup", arg0, arg1)
	ret0, _ := ret[0].(*apploadbalancer.TargetGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ALBGetTargetGroup indicates an expected call of ALBGetTargetGroup.
func (mr *MockClientMockRecorder) ALBGetTargetGroup(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ALBGetTargetGroup", reflect.TypeOf((*MockClient)(nil).ALBGetTargetGroup), arg0, arg1)
}

// ALBRemoveTarget mocks base method.
func (m *MockClient) ALBRemoveTarget(arg0 context.Context, arg1 *apploadbalancer.RemoveTargetsRequest) (*operation.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ALBRemoveTarget", arg0, arg1)
	ret0, _ := ret[0].(*operation.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ALBRemoveTarget indicates an expected call of ALBRemoveTarget.
func (mr *MockClientMockRecorder) ALBRemoveTarget(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ALBRemoveTarget", reflect.TypeOf((*MockClient)(nil).ALBRemoveTarget), arg0, arg1)
}

// ALBTargetGroupCreate mocks base method.
func (m *MockClient) ALBTargetGroupCreate(arg0 context.Context, arg1 *apploadbalancer.CreateTargetGroupRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ALBTargetGroupCreate", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ALBTargetGroupCreate indicates an expected call of ALBTargetGroupCreate.
func (mr *MockClientMockRecorder) ALBTargetGroupCreate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ALBTargetGroupCreate", reflect.TypeOf((*MockClient)(nil).ALBTargetGroupCreate), arg0, arg1)
}

// ALBTargetGroupDelete mocks base method.
func (m *MockClient) ALBTargetGroupDelete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ALBTargetGroupDelete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ALBTargetGroupDelete indicates an expected call of ALBTargetGroupDelete.
func (mr *MockClientMockRecorder) ALBTargetGroupDelete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ALBTargetGroupDelete", reflect.TypeOf((*MockClient)(nil).ALBTargetGroupDelete), arg0, arg1)
}

// ALBTargetGroupGet mocks base method.
func (m *MockClient) ALBTargetGroupGet(arg0 context.Context, arg1 string) (*apploadbalancer.TargetGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ALBTargetGroupGet", arg0, arg1)
	ret0, _ := ret[0].(*apploadbalancer.TargetGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ALBTargetGroupGet indicates an expected call of ALBTargetGroupGet.
func (mr *MockClientMockRecorder) ALBTargetGroupGet(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ALBTargetGroupGet", reflect.TypeOf((*MockClient)(nil).ALBTargetGroupGet), arg0, arg1)
}

// ALBTargetGroupGetByName mocks base method.
func (m *MockClient) ALBTargetGroupGetByName(arg0 context.Context, arg1, arg2 string) (*apploadbalancer.TargetGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ALBTargetGroupGetByName", arg0, arg1, arg2)
	ret0, _ := ret[0].(*apploadbalancer.TargetGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ALBTargetGroupGetByName indicates an expected call of ALBTargetGroupGetByName.
func (mr *MockClientMockRecorder) ALBTargetGroupGetByName(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ALBTargetGroupGetByName", reflect.TypeOf((*MockClient)(nil).ALBTargetGroupGetByName), arg0, arg1, arg2)
}

// Close mocks base method.
func (m *MockClient) Close(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close), arg0)
}

// ComputeCreate mocks base method.
func (m *MockClient) ComputeCreate(arg0 context.Context, arg1 *compute.CreateInstanceRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComputeCreate", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ComputeCreate indicates an expected call of ComputeCreate.
func (mr *MockClientMockRecorder) ComputeCreate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComputeCreate", reflect.TypeOf((*MockClient)(nil).ComputeCreate), arg0, arg1)
}

// ComputeDelete mocks base method.
func (m *MockClient) ComputeDelete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComputeDelete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ComputeDelete indicates an expected call of ComputeDelete.
func (mr *MockClientMockRecorder) ComputeDelete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComputeDelete", reflect.TypeOf((*MockClient)(nil).ComputeDelete), arg0, arg1)
}

// ComputeGet mocks base method.
func (m *MockClient) ComputeGet(arg0 context.Context, arg1 string) (*compute.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ComputeGet", arg0, arg1)
	ret0, _ := ret[0].(*compute.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ComputeGet indicates an expected call of ComputeGet.
func (mr *MockClientMockRecorder) ComputeGet(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ComputeGet", reflect.TypeOf((*MockClient)(nil).ComputeGet), arg0, arg1)
}

// NLBAddTarget mocks base method.
func (m *MockClient) NLBAddTarget(arg0 context.Context, arg1 *loadbalancer.AddTargetsRequest) (*operation.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NLBAddTarget", arg0, arg1)
	ret0, _ := ret[0].(*operation.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NLBAddTarget indicates an expected call of NLBAddTarget.
func (mr *MockClientMockRecorder) NLBAddTarget(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NLBAddTarget", reflect.TypeOf((*MockClient)(nil).NLBAddTarget), arg0, arg1)
}

// NLBGetTargetGroup mocks base method.
func (m *MockClient) NLBGetTargetGroup(arg0 context.Context, arg1 string) (*loadbalancer.TargetGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NLBGetTargetGroup", arg0, arg1)
	ret0, _ := ret[0].(*loadbalancer.TargetGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NLBGetTargetGroup indicates an expected call of NLBGetTargetGroup.
func (mr *MockClientMockRecorder) NLBGetTargetGroup(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NLBGetTargetGroup", reflect.TypeOf((*MockClient)(nil).NLBGetTargetGroup), arg0, arg1)
}

// NLBRemoveTarget mocks base method.
func (m *MockClient) NLBRemoveTarget(arg0 context.Context, arg1 *loadbalancer.RemoveTargetsRequest) (*operation.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NLBRemoveTarget", arg0, arg1)
	ret0, _ := ret[0].(*operation.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NLBRemoveTarget indicates an expected call of NLBRemoveTarget.
func (mr *MockClientMockRecorder) NLBRemoveTarget(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NLBRemoveTarget", reflect.TypeOf((*MockClient)(nil).NLBRemoveTarget), arg0, arg1)
}
